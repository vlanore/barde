__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1647132644319, "setup": [".py", "from pathlib import Path\n\nfrom setuptools import setup\n\nsetup(\nname=\"barde\",\nversion=\"0.1\",\ndescription=Path(\"README.md\").read_text(),\nauthor=\"vlanore\",\nauthor_email=\"vincent.lanore@gmail.com\",\npackages=[\"barde\"],\ninstall_requires=[\"brython\"],\n)\n", ["pathlib", "setuptools"]], "barde.state": [".py", "from browser.local_storage import storage\nfrom browser.object_storage import (\nObjectStorage,\n)\n\n\nSTATE=ObjectStorage(storage)\n", ["browser.local_storage", "browser.object_storage"]], "barde.passage": [".py", "import sys\nimport datetime\nfrom typing import Callable,Optional\n\nfrom browser import document\nfrom browser import html as bh\nfrom barde.display import call_passage\nfrom barde.state import STATE\n\n\nPASSAGES={}\n\n\nSTART:Optional[str]=None\n\n\ndef hide_sidebar(_event):\n document[\"open-sidebar\"].style=\"display:block;\"\n document[\"sidebar-box\"].style=\"display:none;\"\n document[\"hide-sidebar\"].unbind(\"click\")\n document[\"open-sidebar\"].bind(\"click\",open_sidebar)\n document[\"body\"].style=\"grid-template-columns: 0 1fr min(95vw, 700px) 1fr;\"\n \n \ndef open_sidebar(_event):\n document[\"open-sidebar\"].style=\"display:none;\"\n document[\"open-sidebar\"].unbind(\"click\")\n document[\"sidebar-box\"].style=\"display:block;\"\n document[\"hide-sidebar\"].bind(\"click\",hide_sidebar)\n document[\n \"body\"\n ].style=(\n \"grid-template-columns: max(min(25vw, 300px), 140px) 1fr min(70vw, 700px) 1fr;\"\n )\n \n \ndef dark_mode(_event):\n ''\n \n document[\"dark-mode\"].html=\"dark\"\n document[\"dark-mode\"].unbind(\"click\")\n \n document[\"light-mode\"].html='<a href=\"javascript:void(0);\">light</a>'\n document[\"light-mode\"].bind(\"click\",light_mode)\n \n document[\"html\"].setAttribute(\"data-theme\",\"dark\")\n \n STATE[\"style-mode\"]=\"dark\"\n \n \ndef light_mode(_event):\n ''\n \n document[\"light-mode\"].html=\"light\"\n document[\"light-mode\"].unbind(\"click\")\n \n document[\"dark-mode\"].html='<a href=\"javascript:void(0);\">dark</a>'\n document[\"dark-mode\"].bind(\"click\",dark_mode)\n \n document[\"html\"].setAttribute(\"data-theme\",\"light\")\n \n STATE[\"style-mode\"]=\"light\"\n \n \ndef select_style():\n ''\n if \"style-mode\"in STATE.keys():\n  match STATE[\"style-mode\"]:\n   case \"light\":\n    light_mode(None )\n   case \"dark\":\n    dark_mode(None )\n else :\n  light_mode(None )\n  \n  \ndef passage(*args,**kwargs):\n ''\n\n\n \n \n match args,kwargs:\n  case[func],{}if callable(func):\n   global PASSAGES\n   PASSAGES[func.__name__]=func\n   return func\n   \n  case([start],{})|([],{\"start\":start})if isinstance(start,bool):\n  \n   def result(func:Callable,start=start):\n    global START\n    global PASSAGES\n    \n    if start:\n     START=func.__name__\n    PASSAGES[func.__name__]=func\n    return func\n    \n   return result\n   \n  case _:\n   sys.exit(1)\n   \n   \ndef open_restart_confirm(_event)->None :\n document[\"restart-confirm\"].showModal()\n \n \ndef close_restart_confirm(_event)->None :\n document[\"restart-confirm\"].close()\n \n \ndef restart(_event):\n document[\"main\"].clear()\n document[\"sidebar-content\"].clear()\n \n for key in STATE.keys():\n  if \"save__\"not in key:\n   STATE.pop(key)\n   \n document[\"hide-sidebar\"].unbind(\"click\")\n document[\"restart\"].unbind(\"click\")\n run()\n close_restart_confirm(None )\n \n \ndef open_save_menu(_event)->None :\n document[\"save-menu\"].showModal()\n \n \ndef close_save_menu(_event)->None :\n document[\"save-menu\"].close()\n \n \ndef render_save_list()->None :\n document[\"save-menu-list\"].clear()\n for i in range(5):\n  if f\"save__{i}__savetime\"in STATE.keys():\n   savetime:str=STATE[f\"save__{i}__savetime\"]\n  else :\n   savetime:str=\" ___ \"\n   \n  if f\"save__{i}__name\"in STATE.keys():\n   name:str=STATE[f\"save__{i}__name\"]\n  else :\n   name:str=\" ___ \"\n   \n  save_block=document[\"save-menu-list\"]<=bh.TR()\n  save_block <=bh.TH(i+1,scope=\"row\")+bh.TD(savetime)+bh.TD(name)\n  \n  save_block <=bh.TD()<=bh.A(\n  \"Save\",href=\"javascript:void(0);\",id=f\"save_slot_{i}\"\n  )+\" - \"+bh.A(\n  \"Load\",href=\"javascript:void(0);\",id=f\"load_slot_{i}\"\n  )+\" - \"+bh.A(\n  \"Clear\",href=\"javascript:void(0);\",id=f\"clear_slot_{i}\"\n  )\n  \n  document[f\"save_slot_{i}\"].bind(\"click\",lambda _,nb=i:save_to(nb))\n  document[f\"load_slot_{i}\"].bind(\"click\",lambda _,nb=i:load_from(nb))\n  document[f\"clear_slot_{i}\"].bind(\"click\",lambda _,nb=i:clear_slot(nb))\n  \n  \ndef clear_slot(slot:int)->None :\n for key in STATE.keys():\n  if f\"save__{slot}__\"in key:\n   STATE.pop(key)\n render_save_list()\n \n \ndef save_to(slot:int)->None :\n STATE[f\"save__{slot}__savetime\"]=str(datetime.datetime.now())\n STATE[f\"save__{slot}__name\"]=STATE[\"last_passage\"]\n for key,value in STATE.items():\n  if \"save__\"not in key:\n   STATE[f\"save__{slot}__{key}\"]=value\n render_save_list()\n \n \ndef load_from(slot:int)->None :\n document[\"main\"].clear()\n document[\"sidebar-content\"].clear()\n \n for key in STATE.keys():\n  if \"save__\"not in key:\n   STATE.pop(key)\n   \n document[\"hide-sidebar\"].unbind(\"click\")\n document[\"restart\"].unbind(\"click\")\n \n for key,value in STATE.items():\n  if f\"save__{slot}\"in key:\n   name=key.split(\"__\")[2]\n   STATE[name]=value\n   \n run()\n close_save_menu(None )\n \n \ndef run():\n\n document[\"close-save-menu\"].bind(\"click\",close_save_menu)\n document[\"saves\"].bind(\"click\",open_save_menu)\n document[\"hide-sidebar\"].bind(\"click\",hide_sidebar)\n \n \n document[\"restart\"].bind(\"click\",open_restart_confirm)\n document[\"restart-yes\"].bind(\"click\",restart)\n document[\"restart-no\"].bind(\"click\",close_restart_confirm)\n \n select_style()\n \n \n if \"last_passage\"in STATE.keys():\n  call_passage(PASSAGES[STATE[\"last_passage\"]],**STATE[\"last_passage_args\"])\n  \n elif START is not None :\n  call_passage(PASSAGES[START])\n  \n  \n document[\"main\"].style=\"visibility: visible;\"\n document[\"sidebar\"].style=\"visibility: visible;\"\n document[\"loading\"].style=\"display: none;\"\n \n \n render_save_list()\n", ["barde.display", "barde.state", "browser", "datetime", "sys", "typing"]], "barde.example": [".py", "from barde import (\nSTATE,\npassage,\nrun,\nOutput,\n)\nfrom barde.display import call_passage\n\n\n@passage(start=True )\ndef init(_body:Output,_sidebar:Output):\n STATE[\"apples\"]=0\n STATE[\"pies\"]=0\n STATE[\"oven_is_on\"]=False\n \n call_passage(house)\n \n \ndef my_sidebar(sidebar:Output)->None :\n sidebar.display(\n f\"**Inventory**\\n\\n `{STATE['apples']}` apples<br/>`{STATE['pies']}` pies\",\n markdown=True ,\n )\n \n \n@passage\ndef house(body:Output,sidebar:Output):\n my_sidebar(sidebar)\n \n def turn_oven_on():\n  STATE[\"oven_is_on\"]=True\n  call_passage(house)\n  \n def bake_pie():\n  STATE[\"pies\"]+=1\n  STATE[\"apples\"]-=5\n  call_passage(house)\n  \n body.title(\"Your house\")\n body.display(\"You are in your house.\")\n \n if STATE[\"oven_is_on\"]:\n  body.display(\"The oven is on\")\n  if STATE[\"apples\"]>=5:\n   body.action_link(bake_pie,\"Bake a pie\",tooltip=\"Bake a yummy <b>pie</b>!\")\n   body.display(\" - \",paragraph=False )\n  else :\n   body.display(\"You don't have enough apples to bake a pie!\")\n else :\n  body.display(\"The oven is off\")\n  \n if not STATE[\"oven_is_on\"]:\n  body.action_link(\n  turn_oven_on,\n  \"Turn on the oven\",\n  tooltip=\"Turning on the <b>oven</b> might help with cooking <b>pies</b>.\",\n  )\n  body.display(\" - \",paragraph=False )\n  \n body.link(\n orchard,\n \"Go to the orchard\",\n tooltip=(\n \"The <b>orchard</b> is a place with big apple trees. \"\n \"You might find <b>apples</b> there.\"\n ),\n )\n \n \n@passage\ndef orchard(body:Output,sidebar:Output,new_apples:int=0):\n STATE[\"apples\"]+=new_apples\n \n my_sidebar(sidebar)\n \n body.title(\"Orchard\")\n body.image(\n \"https://grocycle.com/wp-content/uploads/2020/01/\"\n \"What-Is-A-Permaculture-Orchard-1024x400.jpg\"\n )\n \n if new_apples >0:\n  body.display(f\"You gather {new_apples} apples\")\n else :\n  body.display(\"You are in the orchard.\")\n  \n nb_apples=body.int_input(\"How many apples:\",1)\n body.action_link(\n lambda :call_passage(orchard,new_apples=nb_apples.get()),\n \"Gather!\",\n tooltip=\"Gather them <b>apples</b>!\",\n )\n body.display(\" - \",paragraph=False )\n body.link(\n house,\n \"Go to your house\",\n tooltip=(\n \"Your <b>house</b> is a place with a big <b>oven</b>\"\n \" which might be linked to <b>pie</b> cooking\"\n ),\n )\n \n \nrun()\n", ["barde", "barde.display", "barde.passage"]], "barde.display": [".py", "from typing import Any,Callable\n\nfrom browser import document\nfrom browser import html as bh\nfrom browser import markdown as mk\n\nfrom barde.state import STATE\n\nNEXT_ID=0\n\n\ndef call_passage(passage:Callable,**params:dict[str,Any])->None :\n document[\"main\"].clear()\n document[\"sidebar-content\"].clear()\n \n STATE[\"last_passage\"]=passage.__name__\n STATE[\"last_passage_args\"]=params\n passage(\n Output(document[\"main\"]),\n Output(document[\"sidebar-content\"]),\n **params,\n )\n \n \nclass DynamicInfo:\n def __init__(self,my_id:str,text:str=\"\")->None :\n  self.my_id=my_id\n  self.set(text)\n  \n def set(self,text:str)->None :\n  document[self.my_id].clear()\n  document[self.my_id]<=text\n  \n  \nclass Input:\n def __init__(self,my_id:str,convert:Callable=str)->None :\n  self.my_id=my_id\n  self.convert=convert\n  \n def get(self)->Any:\n  return self.convert(document[self.my_id].value)\n  \n def on_change(self,func:Callable)->None :\n  document[self.my_id].bind(\"input\",lambda _,func=func:func())\n  \n  \nclass Radio:\n def __init__(self,my_id:str)->None :\n  self.my_id=my_id\n  \n def get(self)->Any:\n  return document.select_one(f\"input[name='{self.my_id}']:checked\").value\n  \n def on_change(self,func:Callable)->None :\n  for element in document.select(f\"input[name='{self.my_id}']\"):\n   element.bind(\"input\",lambda _,func=func:func())\n   \n   \ndef get_id()->str:\n global NEXT_ID\n my_id=NEXT_ID\n NEXT_ID +=1\n return f\"id_{my_id}\"\n \n \nclass Output:\n def __init__(self,target)->None :\n  self.target=target\n  \n def clear_page(self):\n  self.target.clear()\n  \n def display(\n self,text:str,markdown:bool=False ,paragraph:bool=True\n )->None :\n  if markdown:\n   mark,_=mk.mark(text)\n   html=mark\n  else :\n   html=text\n  if paragraph:\n   self.target <=bh.P()\n   self.target.children[-1].html=html\n  else :\n   self.target <=bh.SPAN()\n   self.target.children[-1].html=html\n   \n def title(self,text)->None :\n  self.target <=bh.H1(text)\n  \n def link(\n self,target_func:Callable,text:str,tooltip:str=\"\",**kwargs\n )->None :\n  my_id=get_id()\n  target_str=target_func.__name__\n  if text ==\"\":\n   text=target_str\n   \n  self.target <=bh.A(text,href=\"javascript:void(0);\",id=my_id)\n  \n  if tooltip !=\"\":\n   self.target.children[-1].attrs[\"class\"]=\"has-tooltip\"\n   self.target.children[-1]<=bh.ARTICLE(tooltip)\n   \n  self.target <=\" \"\n  \n  def result(\n  _,func=target_func,func_args:dict[str,Any]=kwargs.copy()\n  )->None :\n   call_passage(func,**func_args)\n   \n  document[my_id].bind(\"click\",result)\n  \n def action_link(\n self,func:Callable,text:str,tooltip:str=\"\",**kwargs\n )->None :\n  my_id=get_id()\n  \n  self.target <=bh.A(text,href=\"javascript:void(0);\",id=my_id)\n  \n  if tooltip !=\"\":\n   self.target.children[-1].attrs[\"class\"]=\"has-tooltip\"\n   self.target.children[-1]<=bh.ARTICLE(tooltip)\n   \n  self.target <=\" \"\n  \n  document[my_id].bind(\"click\",lambda _,args=kwargs.copy():func(**args))\n  \n def image(self,src:str)->None :\n  self.target <=bh.IMG(src=src)\n  \n def text_input(self,label:str=\"\")->Input:\n  my_id=get_id()\n  \n  self.target <=bh.LABEL(label)<=bh.INPUT(type=\"text\",id=my_id)\n  \n  return Input(my_id)\n  \n def int_input(self,label:str=\"\",default:int=0)->Input:\n  my_id=get_id()\n  \n  self.target <=bh.LABEL(label)<=bh.INPUT(\n  value=default,type=\"number\",id=my_id\n  )\n  \n  return Input(my_id,int)\n  \n def radio_buttons(self,choices:list[str])->Radio:\n  my_id=get_id()\n  \n  self.target <=bh.FIELDSET()\n  for choice in choices:\n   self.target.children[-1]<=bh.LABEL()<=bh.INPUT(\n   type=\"radio\",name=my_id,value=choice\n   )+choice\n   \n  self.target.select_one(f\"input[name='{my_id}']\").checked=\"checked\"\n  \n  return Radio(my_id)\n  \n def dynamic_info(self,text=\"\")->DynamicInfo:\n  my_id=get_id()\n  self.target <=bh.P(id=my_id)\n  return DynamicInfo(my_id,text)\n", ["barde.state", "browser", "typing"]], "barde": [".py", "from .display import Output\nfrom .passage import (\npassage,\nrun,\n)\nfrom .state import STATE\n\n__all__=[\n\"Output\",\n\"passage\",\n\"run\",\n\"STATE\",\n]\n", ["barde.display", "barde.passage", "barde.state"], 1]}
__BRYTHON__.update_VFS(scripts)
